/* eslint-disable react/no-unescaped-entities */
import { BasciConnect } from "components/ConnectWallet";
import useFaucet from "hooks/useFaucet";
import type { NextPage } from "next";
import Head from "next/head";
import { useEffect, useState } from "react";
import { useAccount, useBalance, useNetwork } from "wagmi";

const Home: NextPage = () => {
  const { chain } = useNetwork();
  const { isConnected, address } = useAccount();
  const { fundToken, fundInfo, isLoading, gasLimit } = useFaucet();
  const formatAddress = (v?: string): undefined | `0x${string}` => {
    if (!v) return undefined;

    return v.startsWith("0x") ? (v as `0x${string}`) : `0x${v}`;
  };

  const { data } = useBalance({
    chainId: chain?.id,
    addressOrName: formatAddress(address),
    token: formatAddress("0x862BC9Bd9265980feA5E69308A98cCB31BeA8d4D"),
    watch: true,
  });

  const { data: poolData } = useBalance({
    chainId: chain?.id,
    addressOrName: formatAddress("0xD22a7ECF2e09dDa61a114751794bC1e3B8dBaa4f"),
    token: formatAddress("0x862BC9Bd9265980feA5E69308A98cCB31BeA8d4D"),
    watch: true,
  });

  const { formatted: userBalance, symbol } = data || {};
  const { formatted: poolBalance } = poolData || {};

  return (
    <div className="bg-gray-200 h-screen w-full">
      <Head>
        <title>Faucet</title>
        <meta
          name="description"
          content="Generated by create next wagmi dapp"
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="absolute top-5 right-10">
        <BasciConnect></BasciConnect>
      </div>

      <div className="mx-auto max-w-[1250px] pt-20">
        <div className="h-full">
          <div className="rounded-b-xl p-5 pb-44 text-black">
            <div className="mb-4 flex items-center justify-between">
              <div className="rounded-lg bg-indigo-50/30 p-3 hover:bg-white hover:text-indigo-500"></div>
              <h1 className="ext-center text-lg font-semibold">
                Test Token Faucet
              </h1>
              <div className="rounded-lg bg-indigo-50/30 p-3 hover:bg-white hover:text-indigo-500"></div>
            </div>
            <div className="space-y-2 text-center">
              <div className="text-slate-400">
                <svg
                  className="mr-1 inline h-4 w-4"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth="2"
                    d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
                  ></path>
                </svg>
                <span>Still Left</span>
              </div>
              <div className="text-4xl font-bold tracking-wider">
                {poolBalance}
                <span className="mx-2"> {symbol}</span>
              </div>
            </div>
          </div>

          <div className="-mt-40 p-5">
            <div className="rounded-xl bg-white p-4 font-medium text-slate-500 shadow-sm">
              <div className="mb-4 flex justify-between">
                <div className="tracking-wides rounded-md bg-slate-100 py-1 px-2 text-xs font-semibold">
                  Your balance
                </div>
              </div>
              <h1 className="pb-4 px-2 text-lg">
                {userBalance}
                <span className="mx-2"> {symbol}</span>
              </h1>

              <button
                disabled={isLoading}
                className="flex w-full items-center justify-center rounded-lg bg-gray-800 py-4 px-5 font-medium tracking-wide text-white text-opacity-90 shadow-slate-100 hover:shadow-lg 
                disabled:cursor-not-allowed disabled:bg-gray-800/60"
                onClick={fundToken}
              >
                {isLoading ? (
                  <>
                    <div
                      className="w-6 h-6 rounded-full animate-spin
                    border-2 border-solid border-slate-200 border-t-transparent"
                    ></div>
                    <span className="mx-4">Processing</span>
                  </>
                ) : (
                  <>
                    <span className="mr-2">Send Me Tokens</span>
                    <svg
                      className="h-6 w-6"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth="2"
                        d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"
                      ></path>
                    </svg>
                  </>
                )}
              </button>
              {!isNaN(gasLimit) && (
                <div className="my-4 flex justify-between">
                  <div className="tracking-wides rounded-md bg-slate-100 py-1 px-2 text-xs font-semibold flex items-center">
                    <span className="mr-2">
                      <svg
                        viewBox="0 0 24 24"
                        width="24"
                        height="24"
                        stroke="currentColor"
                        strokeWidth="2"
                        fill="none"
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        className="text-black/50 w-4"
                      >
                        <circle cx="12" cy="12" r="10"></circle>
                        <line x1="12" y1="8" x2="12" y2="12"></line>
                        <line x1="12" y1="16" x2="12.01" y2="16"></line>
                      </svg>
                    </span>
                    Estimate Gas: {parseInt(gasLimit)}
                  </div>
                </div>
              )}
            </div>
          </div>

          <section className="p-5">
            <div className="mb-5 flex items-center justify-between">
              <h4 className="font-medium text-slate-500">History</h4>
              <div className="rounded-md bg-slate-200 px-2 font-semibold text-gray-900">
                3
              </div>
            </div>
            <div className="space-y-2"></div>
          </section>
        </div>
      </div>
      {/* {isShowToast && (
        <button
          type="button"
          className="fixed top-20 right-10 z-50 rounded-md bg-black px-4 py-2 text-white transition"
        >
          <div className="flex items-center space-x-2">
            <span className="text-3xl">
              <i className="bx bx-check"></i>
            </span>
            <p className="font-bold">Transcation sent successfully!</p>
          </div>
        </button>
      )} */}
    </div>
  );
};

export default Home;
