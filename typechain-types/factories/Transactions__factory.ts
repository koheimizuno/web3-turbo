/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Transactions, TransactionsInterface } from "../Transactions";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address[]",
        name: "_receivers",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "_sentAmounts",
        type: "uint256[]",
      },
    ],
    name: "MultiTransfer",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "message",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "getAllTransactions",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "address",
            name: "receiver",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "message",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct Transactions.TransferStruct[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMultiCallTransactions",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "address[]",
            name: "receiverArray",
            type: "address[]",
          },
          {
            internalType: "uint256[]",
            name: "sentAmountArray",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct Transactions.MultiTransferStruct[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTransactionCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_receivers",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "_sentAmounts",
        type: "uint256[]",
      },
    ],
    name: "multiTransactionCall",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "singleTransactionCall",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506119ca806100206000396000f3fe60806040526004361061004a5760003560e01c806327506f531461004f5780632e7700f01461007a5780638bc8b79a146100a5578063a3a8ed39146100c1578063c99a17b2146100dd575b600080fd5b34801561005b57600080fd5b50610064610108565b6040516100719190611421565b60405180910390f35b34801561008657600080fd5b5061008f6102b9565b60405161009c9190611483565b60405180910390f35b6100bf60048036038101906100ba9190610dc0565b6102c2565b005b6100db60048036038101906100d69190610e27565b61050e565b005b3480156100e957600080fd5b506100f261093d565b6040516100ff91906113ff565b60405180910390f35b60606002805480602002602001604051908101604052809291908181526020016000905b828210156102b057838290600052602060002090600502016040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382018054610215906117b0565b80601f0160208091040260200160405190810160405280929190818152602001828054610241906117b0565b801561028e5780601f106102635761010080835404028352916020019161028e565b820191906000526020600020905b81548152906001019060200180831161027157829003601f168201915b505050505081526020016004820154815250508152602001906001019061012c565b50505050905090565b60008054905090565b6000808473ffffffffffffffffffffffffffffffffffffffff16346040516102e990611355565b60006040518083038185875af1925050503d8060008114610326576040519150601f19603f3d011682016040523d82523d6000602084013e61032b565b606091505b509150915081610370576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036790611443565b60405180910390fd5b60016000808282546103829190611660565b9250508190555060026040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff16815260200186815260200185815260200142815250908060018154018082558091505060019003906000526020600020906005020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015560608201518160030190805190602001906104bb929190610ae2565b506080820151816004015550507fc4b32d7ff75a51e487f3cbb5d3202f2efecca1f4c2b987e0039c1d3220b48a8333868686426040516104ff95949392919061136a565b60405180910390a15050505050565b600034905060005b858590508110156107875783838281811061055a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002013582101561056d57600080fd5b60008484838181106105a8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135836105ba91906116b6565b116105ee577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b838382818110610627577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201358261063991906116b6565b91506000868683818110610676577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061068b9190610d97565b73ffffffffffffffffffffffffffffffffffffffff168585848181106106da577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201356040516106ed90611355565b60006040518083038185875af1925050503d806000811461072a576040519150601f19603f3d011682016040523d82523d6000602084013e61072f565b606091505b5050905080610773576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076a90611463565b60405180910390fd5b50808061077f90611813565b915050610516565b600160405180608001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001888880806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508152602001868680806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050815260200142815250908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190805190602001906108ce929190610b68565b5060408201518160020190805190602001906108eb929190610bf2565b506060820151816003015550507f0896937eccad915781111966fd22440744b7acfb76173bed7326c71cb92991b08686868660405161092d94939291906113c4565b60405180910390a1505050505050565b60606001805480602002602001604051908101604052809291908181526020016000905b82821015610ad957838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805480602002602001604051908101604052809291908181526020018280548015610a5f57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610a15575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610ab757602002820191906000526020600020905b815481526020019060010190808311610aa3575b5050505050815260200160038201548152505081526020019060010190610961565b50505050905090565b828054610aee906117b0565b90600052602060002090601f016020900481019282610b105760008555610b57565b82601f10610b2957805160ff1916838001178555610b57565b82800160010185558215610b57579182015b82811115610b56578251825591602001919060010190610b3b565b5b509050610b649190610c3f565b5090565b828054828255906000526020600020908101928215610be1579160200282015b82811115610be05782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b88565b5b509050610bee9190610c3f565b5090565b828054828255906000526020600020908101928215610c2e579160200282015b82811115610c2d578251825591602001919060010190610c12565b5b509050610c3b9190610c3f565b5090565b5b80821115610c58576000816000905550600101610c40565b5090565b6000610c6f610c6a846114c3565b61149e565b905082815260208101848484011115610c8757600080fd5b610c9284828561176e565b509392505050565b600081359050610ca98161194f565b92915050565b600081359050610cbe81611966565b92915050565b60008083601f840112610cd657600080fd5b8235905067ffffffffffffffff811115610cef57600080fd5b602083019150836020820283011115610d0757600080fd5b9250929050565b60008083601f840112610d2057600080fd5b8235905067ffffffffffffffff811115610d3957600080fd5b602083019150836020820283011115610d5157600080fd5b9250929050565b600082601f830112610d6957600080fd5b8135610d79848260208601610c5c565b91505092915050565b600081359050610d918161197d565b92915050565b600060208284031215610da957600080fd5b6000610db784828501610c9a565b91505092915050565b600080600060608486031215610dd557600080fd5b6000610de386828701610caf565b9350506020610df486828701610d82565b925050604084013567ffffffffffffffff811115610e1157600080fd5b610e1d86828701610d58565b9150509250925092565b60008060008060408587031215610e3d57600080fd5b600085013567ffffffffffffffff811115610e5757600080fd5b610e6387828801610cc4565b9450945050602085013567ffffffffffffffff811115610e8257600080fd5b610e8e87828801610d0e565b925092505092959194509250565b6000610ea88383610f03565b60208301905092915050565b6000610ec08383611257565b905092915050565b6000610ed483836112c1565b905092915050565b6000610ee88383611337565b60208301905092915050565b610efd81611738565b82525050565b610f0c816116ea565b82525050565b610f1b816116ea565b82525050565b6000610f2d83856115c7565b9350610f38826114f4565b8060005b85811015610f7157610f4e8284611649565b610f588882610e9c565b9750610f6383611575565b925050600181019050610f3c565b5085925050509392505050565b6000610f898261153e565b610f9381856115b6565b9350610f9e836114fe565b8060005b83811015610fcf578151610fb68882610e9c565b9750610fc183611582565b925050600181019050610fa2565b5085935050505092915050565b6000610fe782611549565b610ff181856115d8565b9350836020820285016110038561150e565b8060005b8581101561103f57848403895281516110208582610eb4565b945061102b8361158f565b925060208a01995050600181019050611007565b50829750879550505050505092915050565b600061105c82611554565b61106681856115e9565b9350836020820285016110788561151e565b8060005b858110156110b457848403895281516110958582610ec8565b94506110a08361159c565b925060208a0199505060018101905061107c565b50829750879550505050505092915050565b60006110d2838561160b565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561110157600080fd5b60208302925061111283858461176e565b82840190509392505050565b60006111298261155f565b61113381856115fa565b935061113e8361152e565b8060005b8381101561116f5781516111568882610edc565b9750611161836115a9565b925050600181019050611142565b5085935050505092915050565b60006111878261156a565b6111918185611627565b93506111a181856020860161177d565b6111aa816118e9565b840191505092915050565b60006111c08261156a565b6111ca8185611638565b93506111da81856020860161177d565b6111e3816118e9565b840191505092915050565b60006111fb601483611638565b9150611206826118fa565b602082019050919050565b600061121e60008361161c565b915061122982611923565b600082019050919050565b6000611241601083611638565b915061124c82611926565b602082019050919050565b600060808301600083015161126f6000860182610f03565b50602083015184820360208601526112878282610f7e565b915050604083015184820360408601526112a1828261111e565b91505060608301516112b66060860182611337565b508091505092915050565b600060a0830160008301516112d96000860182610f03565b5060208301516112ec6020860182610f03565b5060408301516112ff6040860182611337565b5060608301518482036060860152611317828261117c565b915050608083015161132c6080860182611337565b508091505092915050565b6113408161172e565b82525050565b61134f8161172e565b82525050565b600061136082611211565b9150819050919050565b600060a08201905061137f6000830188610f12565b61138c6020830187610ef4565b6113996040830186611346565b81810360608301526113ab81856111b5565b90506113ba6080830184611346565b9695505050505050565b600060408201905081810360008301526113df818688610f21565b905081810360208301526113f48184866110c6565b905095945050505050565b600060208201905081810360008301526114198184610fdc565b905092915050565b6000602082019050818103600083015261143b8184611051565b905092915050565b6000602082019050818103600083015261145c816111ee565b9050919050565b6000602082019050818103600083015261147c81611234565b9050919050565b60006020820190506114986000830184611346565b92915050565b60006114a86114b9565b90506114b482826117e2565b919050565b6000604051905090565b600067ffffffffffffffff8211156114de576114dd6118ba565b5b6114e7826118e9565b9050602081019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006116586020840184610c9a565b905092915050565b600061166b8261172e565b91506116768361172e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156116ab576116aa61185c565b5b828201905092915050565b60006116c18261172e565b91506116cc8361172e565b9250828210156116df576116de61185c565b5b828203905092915050565b60006116f58261170e565b9050919050565b60006117078261170e565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006117438261174a565b9050919050565b60006117558261175c565b9050919050565b60006117678261170e565b9050919050565b82818337600083830152505050565b60005b8381101561179b578082015181840152602081019050611780565b838111156117aa576000848401525b50505050565b600060028204905060018216806117c857607f821691505b602082108114156117dc576117db61188b565b5b50919050565b6117eb826118e9565b810181811067ffffffffffffffff8211171561180a576118096118ba565b5b80604052505050565b600061181e8261172e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156118515761185061185c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b50565b7f5472616e73666572206661696c65642e00000000000000000000000000000000600082015250565b611958816116ea565b811461196357600080fd5b50565b61196f816116fc565b811461197a57600080fd5b50565b6119868161172e565b811461199157600080fd5b5056fea26469706673582212204b097ee60e5902a6307d1f83481583bd000445ecff8550194629c2c87bfeee5264736f6c63430008030033";

type TransactionsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TransactionsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Transactions__factory extends ContractFactory {
  constructor(...args: TransactionsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Transactions";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Transactions> {
    return super.deploy(overrides || {}) as Promise<Transactions>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Transactions {
    return super.attach(address) as Transactions;
  }
  connect(signer: Signer): Transactions__factory {
    return super.connect(signer) as Transactions__factory;
  }
  static readonly contractName: "Transactions";
  public readonly contractName: "Transactions";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TransactionsInterface {
    return new utils.Interface(_abi) as TransactionsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Transactions {
    return new Contract(address, _abi, signerOrProvider) as Transactions;
  }
}
