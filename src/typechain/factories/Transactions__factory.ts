/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Transactions, TransactionsInterface } from "../Transactions";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address[]",
        name: "_receivers",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "_sentAmounts",
        type: "uint256[]",
      },
    ],
    name: "MultiTransfer",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "message",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "getAllTransactions",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "address",
            name: "receiver",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "message",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct Transactions.TransferStruct[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMultiCallTransactions",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "address[]",
            name: "receiverArray",
            type: "address[]",
          },
          {
            internalType: "uint256[]",
            name: "sentAmountArray",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct Transactions.MultiTransferStruct[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTransactionCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_receivers",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "_sentAmounts",
        type: "uint256[]",
      },
    ],
    name: "multiTransactionCall",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "singleTransactionCall",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506119c7806100206000396000f3fe60806040526004361061004a5760003560e01c806327506f531461004f5780632e7700f01461007a5780638bc8b79a146100a5578063a3a8ed39146100c1578063c99a17b2146100dd575b600080fd5b34801561005b57600080fd5b50610064610108565b60405161007191906113f4565b60405180910390f35b34801561008657600080fd5b5061008f6102b9565b60405161009c9190611456565b60405180910390f35b6100bf60048036038101906100ba9190610d99565b6102c2565b005b6100db60048036038101906100d69190610e00565b61050b565b005b3480156100e957600080fd5b506100f26108a7565b6040516100ff91906113d2565b60405180910390f35b60606002805480602002602001604051908101604052809291908181526020016000905b828210156102b057838290600052602060002090600502016040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382018054610215906117ad565b80601f0160208091040260200160405190810160405280929190818152602001828054610241906117ad565b801561028e5780601f106102635761010080835404028352916020019161028e565b820191906000526020600020905b81548152906001019060200180831161027157829003601f168201915b505050505081526020016004820154815250508152602001906001019061012c565b50505050905090565b60008054905090565b60008373ffffffffffffffffffffffffffffffffffffffff16346040516102e89061132c565b60006040518083038185875af1925050503d8060008114610325576040519150601f19603f3d011682016040523d82523d6000602084013e61032a565b606091505b505090508061036e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036590611416565b60405180910390fd5b6001600080828254610380919061165d565b9250508190555060026040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff16815260200185815260200184815260200142815250908060018154018082558091505060019003906000526020600020906005020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015560608201518160030190805190602001906104b9929190610a4c565b506080820151816004015550507fc4b32d7ff75a51e487f3cbb5d3202f2efecca1f4c2b987e0039c1d3220b48a8333858585426040516104fd959493929190611341565b60405180910390a150505050565b600034905060005b835181101561077957828181518110610555577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015182101561056957600080fd5b60008382815181106105a4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151836105b791906116b3565b116105eb577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b828181518110610624577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518261063791906116b3565b91506000848281518110610674577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168483815181106106cb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516040516106df9061132c565b60006040518083038185875af1925050503d806000811461071c576040519150601f19603f3d011682016040523d82523d6000602084013e610721565b606091505b5050905080610765576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075c90611436565b60405180910390fd5b50808061077190611810565b915050610513565b600160405180608001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200186815260200185815260200142815250908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101908051906020019061083e929190610ad2565b50604082015181600201908051906020019061085b929190610b5c565b506060820151816003015550507f0896937eccad915781111966fd22440744b7acfb76173bed7326c71cb92991b0848460405161089992919061139b565b60405180910390a150505050565b60606001805480602002602001604051908101604052809291908181526020016000905b82821015610a4357838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054806020026020016040519081016040528092919081815260200182805480156109c957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161097f575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610a2157602002820191906000526020600020905b815481526020019060010190808311610a0d575b50505050508152602001600382015481525050815260200190600101906108cb565b50505050905090565b828054610a58906117ad565b90600052602060002090601f016020900481019282610a7a5760008555610ac1565b82601f10610a9357805160ff1916838001178555610ac1565b82800160010185558215610ac1579182015b82811115610ac0578251825591602001919060010190610aa5565b5b509050610ace9190610ba9565b5090565b828054828255906000526020600020908101928215610b4b579160200282015b82811115610b4a5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610af2565b5b509050610b589190610ba9565b5090565b828054828255906000526020600020908101928215610b98579160200282015b82811115610b97578251825591602001919060010190610b7c565b5b509050610ba59190610ba9565b5090565b5b80821115610bc2576000816000905550600101610baa565b5090565b6000610bd9610bd484611496565b611471565b90508083825260208201905082856020860282011115610bf857600080fd5b60005b85811015610c285781610c0e8882610cdc565b845260208401935060208301925050600181019050610bfb565b5050509392505050565b6000610c45610c40846114c2565b611471565b90508083825260208201905082856020860282011115610c6457600080fd5b60005b85811015610c945781610c7a8882610d84565b845260208401935060208301925050600181019050610c67565b5050509392505050565b6000610cb1610cac846114ee565b611471565b905082815260208101848484011115610cc957600080fd5b610cd484828561176b565b509392505050565b600081359050610ceb8161194c565b92915050565b600081359050610d0081611963565b92915050565b600082601f830112610d1757600080fd5b8135610d27848260208601610bc6565b91505092915050565b600082601f830112610d4157600080fd5b8135610d51848260208601610c32565b91505092915050565b600082601f830112610d6b57600080fd5b8135610d7b848260208601610c9e565b91505092915050565b600081359050610d938161197a565b92915050565b600080600060608486031215610dae57600080fd5b6000610dbc86828701610cf1565b9350506020610dcd86828701610d84565b925050604084013567ffffffffffffffff811115610dea57600080fd5b610df686828701610d5a565b9150509250925092565b60008060408385031215610e1357600080fd5b600083013567ffffffffffffffff811115610e2d57600080fd5b610e3985828601610d06565b925050602083013567ffffffffffffffff811115610e5657600080fd5b610e6285828601610d30565b9150509250929050565b6000610e788383610ed3565b60208301905092915050565b6000610e90838361122e565b905092915050565b6000610ea48383611298565b905092915050565b6000610eb8838361130e565b60208301905092915050565b610ecd81611735565b82525050565b610edc816116e7565b82525050565b610eeb816116e7565b82525050565b6000610efc8261155f565b610f0681856115ca565b9350610f118361151f565b8060005b83811015610f42578151610f298882610e6c565b9750610f3483611596565b925050600181019050610f15565b5085935050505092915050565b6000610f5a8261155f565b610f6481856115db565b9350610f6f8361151f565b8060005b83811015610fa0578151610f878882610e6c565b9750610f9283611596565b925050600181019050610f73565b5085935050505092915050565b6000610fb88261156a565b610fc281856115ec565b935083602082028501610fd48561152f565b8060005b858110156110105784840389528151610ff18582610e84565b9450610ffc836115a3565b925060208a01995050600181019050610fd8565b50829750879550505050505092915050565b600061102d82611575565b61103781856115fd565b9350836020820285016110498561153f565b8060005b8581101561108557848403895281516110668582610e98565b9450611071836115b0565b925060208a0199505060018101905061104d565b50829750879550505050505092915050565b60006110a282611580565b6110ac818561160e565b93506110b78361154f565b8060005b838110156110e85781516110cf8882610eac565b97506110da836115bd565b9250506001810190506110bb565b5085935050505092915050565b600061110082611580565b61110a818561161f565b93506111158361154f565b8060005b8381101561114657815161112d8882610eac565b9750611138836115bd565b925050600181019050611119565b5085935050505092915050565b600061115e8261158b565b611168818561163b565b935061117881856020860161177a565b611181816118e6565b840191505092915050565b60006111978261158b565b6111a1818561164c565b93506111b181856020860161177a565b6111ba816118e6565b840191505092915050565b60006111d260148361164c565b91506111dd826118f7565b602082019050919050565b60006111f5600083611630565b915061120082611920565b600082019050919050565b600061121860108361164c565b915061122382611923565b602082019050919050565b60006080830160008301516112466000860182610ed3565b506020830151848203602086015261125e8282610ef1565b915050604083015184820360408601526112788282611097565b915050606083015161128d606086018261130e565b508091505092915050565b600060a0830160008301516112b06000860182610ed3565b5060208301516112c36020860182610ed3565b5060408301516112d6604086018261130e565b50606083015184820360608601526112ee8282611153565b9150506080830151611303608086018261130e565b508091505092915050565b6113178161172b565b82525050565b6113268161172b565b82525050565b6000611337826111e8565b9150819050919050565b600060a0820190506113566000830188610ee2565b6113636020830187610ec4565b611370604083018661131d565b8181036060830152611382818561118c565b9050611391608083018461131d565b9695505050505050565b600060408201905081810360008301526113b58185610f4f565b905081810360208301526113c981846110f5565b90509392505050565b600060208201905081810360008301526113ec8184610fad565b905092915050565b6000602082019050818103600083015261140e8184611022565b905092915050565b6000602082019050818103600083015261142f816111c5565b9050919050565b6000602082019050818103600083015261144f8161120b565b9050919050565b600060208201905061146b600083018461131d565b92915050565b600061147b61148c565b905061148782826117df565b919050565b6000604051905090565b600067ffffffffffffffff8211156114b1576114b06118b7565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156114dd576114dc6118b7565b5b602082029050602081019050919050565b600067ffffffffffffffff821115611509576115086118b7565b5b611512826118e6565b9050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006116688261172b565b91506116738361172b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156116a8576116a7611859565b5b828201905092915050565b60006116be8261172b565b91506116c98361172b565b9250828210156116dc576116db611859565b5b828203905092915050565b60006116f28261170b565b9050919050565b60006117048261170b565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061174082611747565b9050919050565b600061175282611759565b9050919050565b60006117648261170b565b9050919050565b82818337600083830152505050565b60005b8381101561179857808201518184015260208101905061177d565b838111156117a7576000848401525b50505050565b600060028204905060018216806117c557607f821691505b602082108114156117d9576117d8611888565b5b50919050565b6117e8826118e6565b810181811067ffffffffffffffff82111715611807576118066118b7565b5b80604052505050565b600061181b8261172b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561184e5761184d611859565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b50565b7f5472616e73666572206661696c65642e00000000000000000000000000000000600082015250565b611955816116e7565b811461196057600080fd5b50565b61196c816116f9565b811461197757600080fd5b50565b6119838161172b565b811461198e57600080fd5b5056fea2646970667358221220de685d2c194f8094513e7eedfefbccc0347d2bf253b7b78c6cfeb709cd6008b964736f6c63430008030033";

type TransactionsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TransactionsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Transactions__factory extends ContractFactory {
  constructor(...args: TransactionsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Transactions";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Transactions> {
    return super.deploy(overrides || {}) as Promise<Transactions>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Transactions {
    return super.attach(address) as Transactions;
  }
  connect(signer: Signer): Transactions__factory {
    return super.connect(signer) as Transactions__factory;
  }
  static readonly contractName: "Transactions";
  public readonly contractName: "Transactions";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TransactionsInterface {
    return new utils.Interface(_abi) as TransactionsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Transactions {
    return new Contract(address, _abi, signerOrProvider) as Transactions;
  }
}
